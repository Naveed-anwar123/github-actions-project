name: node app workflow
on:
  workflow_dispatch:
  push:
    branches:
      - main
      - feature/*
env: # these are setup at the environment in the runner
  MONGO_URI: mongodb+srv://supercluster.d83jj.mongodb.net/superData # let say this is prod database
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }} # access repository level variables
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }} # access repository level secrets
  REPO: naveed-anwar123

jobs:
  unit-testing:
    strategy:
      matrix:
        nodejs_version: [18]
        operating_system: [ubuntu-latest, macos-latest]
        exclude:
          - nodejs_version: 18
            operating_system: macos-latest
    runs-on: ${{ matrix.operating_system }}
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        ports: 
          - 27017:27017
    env: # these are setup at the environment in the runner
      MONGO_URI: mongodb://localhost:27017/superData # let say this is prod database
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password
    name: unit-testing
    steps:
      - name: Repository Checkout # download repo
        uses: actions/checkout@v4 

      - name: Setup Node
        uses: actions/setup-node@v4 # install node
        with:
          node-version: ${{ matrix.nodejs_version }}
      
      - name: Composite Action - Cache and Install packages
        uses: ./.github/custom-actions/npm-action/action.yaml
        with:
          path: node_modules
          command: npm install

      - name: Run Tests # run the unit tests
        id: nodejs_unit_test_id # give a unique id id
        run: |
          npm test
          ls -ltrh

      - name: Archive test result for ${{ github.sha }}
        #if: failure() && (steps.nodejs_unit_test_id.outcome == 'failure' || steps.nodejs_unit_test_id.outcome == 'success')
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Result-${{ github.sha }} # to generate random names
          path: test-results.xml # where the file is present on the runner vm

  code-coverage: 
    strategy:
      matrix:
        nodejs_version: [18]
        operating_system: [ubuntu-latest]
    runs-on: ${{ matrix.operating_system }}

    container: # RUNS the job inside a container on the runner virtual machine
      image: node:18
    
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        options:
          --name mongo
    env: # these are setup at the environment in the runner
      MONGO_URI: mongodb://mongo:27017/superData # let say this is prod database
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password

    name: code coverage 
    steps:
      - name: Repository Checkout # download repo
        uses: actions/checkout@v4 

      # - name: Setup Node 18
      #   uses: actions/setup-node@v4 # install node
      #   with:
      #     node-version: 18
      
      - name: Composite Action - Cache and Install packages
        uses: ./.github/custom-actions/npm-action/action.yaml
        with:
          path: node_modules
          command: npm install

      - name: Run Coverage # run the unit tests
        run: npm run coverage
        continue-on-error: true

      - name: Code Coverage Results
        uses: actions/upload-artifact@v4
        with:
          name: Code-Coverage-${{ github.sha }} # to generate random names
          path: coverage # where the file is present on the runner vm
          retention-days: 5
  
  reports-s3:
    name: Store Reports to S3
    needs: [code-coverage,unit-testing]
    strategy:
      matrix:
        nodejs_version: [18]
        operating_system: [ubuntu-latest]
    runs-on: ${{ matrix.operating_system }}    
    continue-on-error: true        
    steps:
      - name: Create Directory for Reports
        run: | 
          mkdir -p reports-${{ github.sha }}

      - name: Doanload Mocha Report 
        uses: actions/download-artifact@v4
        with:
          name: Result-${{ github.sha }} 
          path: reports-${{ github.sha }}/

      - name: Doanload Code-Coverage Report 
        uses: actions/download-artifact@v4
        with:
          name: Code-Coverage-${{ github.sha }}
          path: reports-${{ github.sha }}/

      - name: List downloaded files
        run:  ls -ltrh reports-${{ github.sha }}/
      
      - name: Upload files to s3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete 
        env:
          AWS_S3_BUCKET: github-actions-bucket-for-nodejs
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: 'us-east-1'  
          SOURCE_DIR: reports-${{ github.sha }}
          DEST_DIR: 'public-artifacts'

  docker:
    name: Containerization job
    runs-on: ubuntu-latest
    needs: [code-coverage, unit-testing]
    permissions: # add permissions for the GITHUB_TOKENs
      packages: write
      contents: read
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      
      - name: Login to GITHUB Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }} # at the start of each job, github generates this token, as soon as job finishes, this token expires, we need to define permissions at the job level

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: . # Path where we have the docker file is
          push: false
          tags: ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{github.sha}}

      - name: Docker Image Testing
        run: |
          docker images
          docker run --name solar-system-app -d \
            -p 3000:3000 \
            -e MONGO_URI=$MONGO_URI \
            -e MONGO_USERNAME=$MONGO_USERNAME \
            -e MONGO_PASSWORD=$MONGO_PASSWORD \
            ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{github.sha}}
          
          docker container ls
          wget -q -O - localhost:3000/live | grep live
      
      - name: Container Registry Push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true # push image to docker hub
          tags: | 
            ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{github.sha}}
            ghcr.io/${{env.REPO}}/solar-system:${{github.sha}}
  
  dev-deploy:
    if: contains(github.ref, 'feature/')
    needs: docker
    uses: ./.github/workflows/reuse-deployment.yaml
    secrets: 
      k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
      mongo-db-password: ${{ secrets.MONGO_PASSWORD }}
    with: # pass inputs to called workflow
      mongo-db-uri: ${{ vars.MONGO_URI }}
      environment: development
      manifest-dir: kubernetes/development/

  dev-integration-testing:
    if: contains(github.ref, 'feature/')
    name: Dev Integration Testing
    runs-on: ubuntu-latest
    needs: dev-deploy
    steps:
      - name: Integration Testing of URL
        env:
          URL: ${{ needs.dev-deploy.outputs.application-uri }}
        run: | 
          echo $URL
          echo ------------------------------------
          curl https://$URL/live -s -k | jq -r .status | grep -i live 

  prod-deploy:
    if: github.ref == 'refs/heads/main'
    needs: docker
    uses: ./.github/workflows/reuse-deployment.yaml
    secrets: 
      k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
      mongo-db-password: ${{ secrets.MONGO_PASSWORD }}
    with: # pass inputs to called workflow
      mongo-db-uri: ${{ vars.MONGO_URI }}
      environment: production
      manifest-dir: kubernetes/production/

  prod-integration-testing:
    if: github.ref == 'refs/heads/main'
    name: Prod Integration Testing
    runs-on: ubuntu-latest
    needs: prod-deploy
    steps:
      - name: Integration Testing of URL
        env:
          URL: ${{ needs.prod-deploy.outputs.application-uri }}
        run: | 
          echo $URL
          echo ------------------------------------
          curl https://$URL/live -s -k | jq -r .status | grep -i live 

  